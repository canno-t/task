<?php

namespace Tests\Feature;

use Database\Factories\TaskFactory;
use Database\Factories\UserFactory;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class UpdateTaskTest extends TestCase
{

    protected $user;

    use WithFaker;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = UserFactory::new()->create();
        DB::beginTransaction();
    }

    public function tearDown(): void
    {
        DB::rollBack();
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     */
    public function test_example(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }

    public function test_notLoggedIn():void{
        $params = [
            'uuid'=>$this->faker->uuid
        ];

        $request = [
            'name'=>$this->faker->name,
            'description'=>$this->faker->sentence,
            'finish_date'=>$this->faker->dateTimeBetween('now', '+30years')->format('Y-m-d')
        ];

        $response = $this->post(route('task.update', $params), $request);

        $response->assertOk()->assertJson([
            'status'=>'error',
            'message'=>'you are not logged in'
        ]);
    }

    public function test_IncorrectUuid():void{

        Sanctum::actingAs($this->user);

        $params = [
            'uuid'=>$this->faker->uuid
        ];

        $request = [
            'name'=>$this->faker->name,
            'description'=>$this->faker->sentence,
            'finish_date'=>$this->faker->dateTimeBetween('now', '+30years')->format('Y-m-d')
        ];

        $response = $this->post(route('task.update', $params), $request);

        $response->assertOk()->assertJson([
            'status'=>'error',
            'message'=>'The selected uuid is invalid.'
        ]);
    }

    public function test_NotAnAuthorOfTheTask():void{

        Sanctum::actingAs($this->user);

        $author = UserFactory::new()->create();

        $task = TaskFactory::new()->create([
            'author_id'=>$author['id'],
            'task_type_id'=>2
        ]);

        $params = [
            'uuid'=>$task['uuid']
        ];

        $request = [
            'name'=>$this->faker->name,
            'description'=>$this->faker->sentence,
            'finish_date'=>$this->faker->dateTimeBetween('now', '+30years')->format('Y-m-d')
        ];

        $response = $this->post(route('task.update', $params), $request);

        $response->assertOk()->assertJson([
            'status'=>'error',
            'message'=>'You are not the author of this task'
        ]);
    }

    public function test_DateBeforeToday():void{

        Sanctum::actingAs($this->user);

        $task = TaskFactory::new()->create([
            'author_id'=>$this->user['id'],
            'task_type_id'=>2
        ]);

        $params = [
            'uuid'=>$task['uuid']
        ];

        $request = [
            'name'=>$this->faker->name,
            'description'=>$this->faker->sentence,
            'finish_date'=>$this->faker->dateTimeBetween('-30years', '-1days')->format('Y-m-d')
        ];

        $response = $this->post(route('task.update', $params), $request);

        $response->assertOk()->assertJson([
            'status'=>'error',
            'message'=>'The finish date field must be a date after today.'
        ]);
    }

    public function test_SuccessfulUpdatingTask():void{

        Sanctum::actingAs($this->user);
        $task = TaskFactory::new()->create([
            'author_id'=>$this->user['id'],
            'task_type_id'=>2
        ]);

        $params = [
            'uuid'=>$task['uuid']
        ];

        $request = [
            'name'=>$this->faker->name,
            'description'=>$this->faker->sentence,
            'finish_date'=>$this->faker->dateTimeBetween('now', '+30years')->format('Y-m-d')
        ];

        $response = $this->post(route('task.update', $params), $request);

        $response->assertOk()->assertJson([
            'status'=>'success',
            'message'=>'Task updated successfully'
        ]);
    }
}
